<!DOCTYPE html>
<html lang="no">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no">
  <!-- Prevent link previews -->
  <meta name="robots" content="noindex, nofollow">
  <meta property="og:title" content="Secure Message - Click to view">
  <meta property="og:description" content="This message will self-destruct after viewing">
  <meta property="og:image" content="/img/lock-icon.png">
  <title>Secret message</title>
  <link rel="stylesheet" href="/css/css.css">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
</head>

<body>
  <div class="container">
    <!-- Add a confirmation step that hides the actual secret -->
    <div id="confirmationContainer">
      <p>A secure message is waiting for you.</p>
      <button id="revealSecret">Click to reveal message</button>
    </div>

    <div id="secretContainer" style="display: none;">
      <textarea id="result" rows="5"><%= secret %></textarea>
      <button id="copySecret">Copy</button>
    </div>
    <div id="copyMessage"></div>
  </div>
  <a href="https://github.com/kodakorg/oleots" class="git-link" target="_blank" rel="noopener noreferrer">
    <img src="https://img.shields.io/badge/github.com-kodakorg%2Fots-orange?style=plastic&logo=github&logoSize=auto"
      alt="GitHub stars">
  </a>

  <script>
    // Initialize as soon as page loads to handle 'notfound' case immediately
    document.addEventListener('DOMContentLoaded', function () {
      initializeSecret();
    });

    document.getElementById('copySecret').addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(document.getElementById('result').value);
        document.getElementById('copyMessage').textContent = 'Secret copied to clipboard!';
      } catch (error) {
        console.error('Could not copy secret:', error);
        document.getElementById('copyMessage').textContent = 'Could not copy secret.';
      }
    });

    // Hide confirmation, show and decrypt the secret when button is clicked
    document.getElementById('revealSecret').addEventListener('click', async () => {
      document.getElementById('confirmationContainer').style.display = 'none';
      document.getElementById('secretContainer').style.display = 'block';

      // Get the encrypted data first
      if (!encryptedSecretData && !initializeSecret()) {
        return;
      }

      // First decrypt the secret (this must happen before we delete it)
      const decryptedText = await decryptSecret();

      // Extract the secret ID from the URL
      const secretId = window.location.pathname.split('/').pop();

      // Delete the secret from the server after decryption is complete
      try {
        const response = await fetch(`/secret/${secretId}`, {
          method: 'DELETE',
        });
        console.log('Secret deletion response:', await response.json());
      } catch (error) {
        console.error('Failed to delete secret:', error);
      }
    });

    // Store encrypted secret data globally but don't decrypt until user confirms
    let encryptedSecretData = null;

    // Initial setup - just grab the encrypted data but don't decrypt yet
    function initializeSecret() {
      const secretContent = document.getElementById('result').textContent;

      // Check if the secret was not found on the server
      if (secretContent === 'notfound') {
        document.getElementById('result').value = "Secret does not exist";
        document.getElementById('copySecret').style.display = 'none';
        // Hide the confirmation container and show the result directly for a better UX
        document.getElementById('confirmationContainer').style.display = 'none';
        document.getElementById('secretContainer').style.display = 'block';
        return false;
      }

      try {
        encryptedSecretData = JSON.parse(secretContent);
        return true;
      } catch (error) {
        console.error("Could not parse the encrypted message", error);
        document.getElementById('result').value = "Invalid encrypted message";
        return false;
      }
    }

    async function decryptSecret() {
      if (!encryptedSecretData && !initializeSecret()) {
        return null;
      }

      const hash = window.location.hash.substring(1);
      const params = new URLSearchParams(hash);
      const keyBase64 = params.get('key');
      if (!keyBase64) {
        console.error("No key found in URL");
        document.getElementById('result').value = "No decryption key found";
        return null;
      }

      const keyBinaryString = atob(keyBase64);
      const keyBuffer = new Uint8Array(keyBinaryString.length);
      for (let i = 0; i < keyBinaryString.length; i++) {
        keyBuffer[i] = keyBinaryString.charCodeAt(i);
      }

      const cryptoKey = await window.crypto.subtle.importKey(
        'raw',
        keyBuffer,
        { name: 'AES-GCM' },
        false,
        ['decrypt']
      );

      const iv = new Uint8Array(encryptedSecretData.iv);
      const ciphertext = new Uint8Array(encryptedSecretData.data);

      try {
        const decryptedBuffer = await window.crypto.subtle.decrypt(
          {
            name: 'AES-GCM',
            iv: iv
          },
          cryptoKey,
          ciphertext
        );

        const decoder = new TextDecoder();
        const decryptedText = decoder.decode(decryptedBuffer);
        document.getElementById('result').value = decryptedText;
        return decryptedText;
      } catch (error) {
        console.error("Could not decrypt the secret:", error);
        document.getElementById('result').value = "Could not decrypt the secret.";
        return null;
      }
    }

    // Initialize but don't decrypt yet
    initializeSecret();
  </script>
</body>

</html>