<!DOCTYPE html>
<html lang="no">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no">
  <title>Secret message</title>
  <link rel="stylesheet" href="/css/css.css">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
</head>

<body>

  <div class="container">
    <div id="secretContainer">
      <textarea id="result" rows="5"><%= secret %></textarea>
      <button id="copySecret">Copy</button>
    </div>
    <div id="copyMessage"></div>
  </div>
  <a href="https://github.com/kodakorg/ots" class="git-link" target="_blank" rel="noopener noreferrer">
    <img src="https://img.shields.io/github/stars/kodakorg/ots?style=social" alt="GitHub stars">
  </a>

  <script>
    document.getElementById('copySecret').addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(document.getElementById('result').textContent);
        document.getElementById('copyMessage').textContent = 'Secret copied to clipboard!';
      } catch (error) {
        console.error('Could not copy secret:', error);
        document.getElementById('copyMessage').textContent = 'Could not copy secret.';
      }
    });
  </script>

  <script>
    async function decryptSecret() {
      const hash = window.location.hash.substring(1);
      const params = new URLSearchParams(hash);
      const keyBase64 = params.get('key');
      if (!keyBase64) {
        console.error("No key found in URL");
        return;
      }

      const keyBinaryString = atob(keyBase64);
      const keyBuffer = new Uint8Array(keyBinaryString.length);
      for (let i = 0; i < keyBinaryString.length; i++) {
        keyBuffer[i] = keyBinaryString.charCodeAt(i);
      }

      const cryptoKey = await window.crypto.subtle.importKey(
        'raw',
        keyBuffer,
        { name: 'AES-GCM' },
        false,
        ['decrypt']
      );

      const encryptedSecretJSON = document.getElementById('result').textContent;
      if (encryptedSecretJSON === 'notfound') {
        document.getElementById('result').textContent = "Secret not found, destroyed or expired.";
        document.getElementById('copySecret').style.display = 'none';
        return;
      }
      let encryptedSecret;
      try {
        encryptedSecret = JSON.parse(encryptedSecretJSON);
      } catch (error) {
        console.error("Could not parse the encrypted message", error);
        return;
      }

      const iv = new Uint8Array(encryptedSecret.iv);
      const ciphertext = new Uint8Array(encryptedSecret.data);

      try {
        const decryptedBuffer = await window.crypto.subtle.decrypt(
          {
            name: 'AES-GCM',
            iv: iv
          },
          cryptoKey,
          ciphertext
        );

        const decoder = new TextDecoder();
        const decryptedText = decoder.decode(decryptedBuffer);
        document.getElementById('result').textContent = decryptedText;
      } catch (error) {
        console.error("Could not decrypt the secret:", error);
        document.getElementById('result').textContent = "Could not decrypt the secret.";
      }
    }

    decryptSecret();
  </script>
</body>

</html>